{"version":3,"sources":["../src/index.js"],"names":["init","image_path","fs","existsSync","mkdirSync","writeFileSync","err","save_image","url","post_id","axios","get","responseType","response","writer","createWriteStream","data","pipe","Promise","resolve","reject","on","delete_image","file_path","path","extname","unlinkSync","write_info","incoming_file","info_path","JSON","stringify","post_to_twitter","tweet_info","b64content","readFileSync","encoding","TwitterClient","post","media_data","mediaIdStr","media_id_string","altText","meta_params","media_id","alt_text","text","params","status","title","media_ids","fetch_image","RedditClient","getSubreddit","getNew","time","incoming_posts","files","readdirSync","dir_file","full_path","filename","basename","i","length","file","id","is_video","console","log","get_file","info","temp_image_data","parse","path_name","main","process","exit"],"mappings":"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","sourcesContent":["// import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\nimport fs from \"fs\"\nimport path from \"path\"\nimport axios from \"axios\"\nimport {TwitterClient, RedditClient} from \"./utility/auth\"\n\nconst init = () => {\n    const image_path = (\"./src/temp_image\")\n\n    if (!fs.existsSync(image_path)) {\n      fs.mkdirSync(image_path)\n      fs.writeFileSync(`${image_path}/info.json`, \"{}\", (err) => {\n        if (err) throw err;\n      })\n      fs.writeFileSync(`${image_path}/a.jpg`, null, (err) => {\n        if (err) throw err;\n      })\n    }\n}\n\nconst save_image = async (url, post_id) => {\n    const response = await axios.get(url, {responseType: \"stream\"})\n    const image_path =(`./src/temp_image/${post_id}.jpg`)\n\n    const writer = fs.createWriteStream(image_path)\n    response.data.pipe(writer)\n\n    return new Promise((resolve, reject) => {\n        writer.on('finish', resolve)\n        writer.on('error', reject)\n      })\n  }\n\nconst delete_image = (file_path) => {\n  if (path.extname(file_path) == \".jpg\") {\n    fs.unlinkSync(file_path, (err)=> {\n      if (err) throw err\n    }) \n  }\n}\n\nconst write_info = async (incoming_file) => {\n  const info_path =(\"./src/temp_image/info.json\")\n  await fs.writeFileSync(info_path, JSON.stringify(incoming_file), (err) => {\n    if (err) throw err\n  })\n}\n\nconst post_to_twitter = (tweet_info) => {\n  const b64content = fs.readFileSync(tweet_info.image_path, {encoding: \"base64\"})\n  TwitterClient.post('media/upload', { media_data: b64content }, function (err, data, response) {\n    // now we can assign alt text to the media, for use by screen readers and\n    // other text-based presentations and interpreters\n    var mediaIdStr = data.media_id_string\n    var altText = \"animal crossing meme from reddit\"\n    var meta_params = { media_id: mediaIdStr, alt_text: { text: altText } }\n   \n    TwitterClient.post('media/metadata/create', meta_params, function (err, data, response) {\n      if (!err) {\n        // now we can reference the media and post a tweet (media will attach to the tweet)\n        var params = { status: `${tweet_info.title}\\n\\n\\n#AnimalCrossing\\n#ACNH\\n#NintendoSwitch`, media_ids: [mediaIdStr] }\n   \n        TwitterClient.post('statuses/update', params, function (err, data, response) {\n        })\n      }\n    })\n  })\n}\n\nconst fetch_image = async () => {\n  try {\n    var incoming_posts\n    incoming_posts = await RedditClient.getSubreddit('animalcrossingmeme').getNew({time: \"day\"})\n    const image_path = (\"./src/temp_image/\")\n    var full_path;\n    const files = fs.readdirSync(image_path)\n    for (const dir_file of files) {\n      if (path.extname(dir_file) == \".jpg\"){\n        full_path = `${image_path}${dir_file}`\n      }\n    }\n    const filename = path.basename(full_path, path.extname(full_path))\n\n    for (let i = 0; i < incoming_posts.length-1; i++) {\n      const file = incoming_posts[i]\n      if (file.id !== filename && file.is_video == false) {\n        delete_image(full_path)\n        write_info(file)\n        await save_image(file.url, file.id)\n        break\n      }\n      continue\n    }\n  }\n  catch (err) {\n    console.log(err)\n  }\n}\n\nconst get_file = () => {\n  var info = {\n    title: null,\n    image_path: null\n  }\n  const info_path = (\"./src/temp_image/info.json\")\n  const temp_image_data = JSON.parse(fs.readFileSync(info_path, \"utf8\"));\n\n  // const path_name = path.join(__dirname, \"../src/temp_image\")\n  info.title =  temp_image_data.title\n\n  const path_name = (\"./src/temp_image\")\n  // const image_path = (`${path_name}/${temp_image_data.id}.jpg`)\n\n  info.image_path = (`${path_name}/${temp_image_data.id}.jpg`)\n\n  // fs.readdirSync(path_name).forEach((file) => {\n  //   console.log(file)\n  //   if(path.extname(file) == \".jpg\") {\n  //     console.log(typeof file)\n  //     info.image_path = `${path_name}/${file}`\n  //   }\n  // })\n  return(info)\n}\n\nconst main = async () => {\n  try {\n    init()\n    console.log(\"before: \", get_file())\n    await fetch_image()\n    console.log(\"after: \", get_file())\n    const info = get_file()\n    post_to_twitter(info)\n    process.exit()\n  } \n  catch (err) {\n    console.log(err)\n  }\n}\n\nmain()"],"file":"index.js"}